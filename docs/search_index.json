[["design-and-extensibility-considerations.html", "Design and extensibility considerations Data structures Extending the color table", " Design and extensibility considerations This section is intended for programmers and experts that would like to extend the capabilities of sits, either by including new data sources, ML algorithms, exporting data to be used in Python or QGIS, or including new display colors. Data structures The sits package uses primarily two data structures: a data cube and a time series table. Most operations in sits use them for input and output. Data cubes are R tibbles where each row contains metadata related to one tile of the reference system used by the satellite operator, as shown in the example below. # create a data cube for Sentinel-2/2A images s2_20LKP_cube_MPC &lt;- sits_cube( source = &quot;MPC&quot;, collection = &quot;SENTINEL-2-L2A&quot;, tiles = &quot;20LKP&quot;, bands = c(&quot;B05&quot;, &quot;B8A&quot;, &quot;B11&quot;, &quot;CLOUD&quot;), start_date = &quot;2019-07-01&quot;, end_date = &quot;2019-07-28&quot; ) # print information on the first 5 columns s2_20LKP_cube_MPC[, 1:5] #&gt; # A tibble: 1 × 5 #&gt; source collection satellite sensor tile #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 MPC SENTINEL-2-L2A SENTINEL-2 MSI 20LKP # print information on the other columns s2_20LKP_cube_MPC[, 6:11] #&gt; # A tibble: 1 × 6 #&gt; xmin xmax ymin ymax crs file_info #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;list&gt; #&gt; 1 199980 309780 8790220 8900020 EPSG:32720 &lt;tibble [20 × 13]&gt; The data cube tibble contains typical information (including satellite, sensor, tile, bounding box, crs). The last column, named file_info, contains a nested tibble with information on the individual files that are part of the data cube. The most important columns are date, band and path. # print the file information for the cube s2_20LKP_cube_MPC$file_info[[1]][, c(&quot;date&quot;, &quot;band&quot;, &quot;path&quot;)] #&gt; # A tibble: 20 × 3 #&gt; date band path #&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 2019-07-03 B05 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 2 2019-07-03 B11 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 3 2019-07-03 B8A /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 4 2019-07-03 CLOUD /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 5 2019-07-08 B05 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 6 2019-07-08 B11 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 7 2019-07-08 B8A /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 8 2019-07-08 CLOUD /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 9 2019-07-13 B05 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 10 2019-07-13 B11 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 11 2019-07-13 B8A /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 12 2019-07-13 CLOUD /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 13 2019-07-18 B05 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 14 2019-07-18 B11 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 15 2019-07-18 B8A /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 16 2019-07-18 CLOUD /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 17 2019-07-23 B05 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 18 2019-07-23 B11 /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 19 2019-07-23 B8A /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… #&gt; 20 2019-07-23 CLOUD /vsicurl/https://sentinel2l2a01.blob.core.windows.net/senti… The time series tibble contains data and metadata. The first six columns contain spatial and temporal information, the label assigned to the sample, and the data cube from where the data has been extracted. The time_series column contains the time series data for each spatiotemporal location. This data is also organized as a tibble, with a column with the dates and the other columns with the values for each spectral band. # print the first 6 columns of a time series tibble library(sitsdata) samples_cerrado_mod13q1[, 1:6] #&gt; # A tibble: 50,160 × 6 #&gt; latitude longitude start_date end_date label cube #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 2 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 3 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 4 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 5 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 6 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 7 -16.2 -54.4 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 8 -16.2 -54.5 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 9 -16.1 -54.7 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; 10 -16.2 -54.7 2018-09-01 2019-09-01 Pasture MOD13Q1 #&gt; # … with 50,150 more rows # print the time series associated to the first location of a tibble samples_cerrado_mod13q1$time_series[[1]] #&gt; # A tibble: 23 × 5 #&gt; Index NDVI EVI NIR MIR #&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 2018-09-14 0.500 0.293 0.263 0.212 #&gt; 2 2018-09-30 0.506 0.284 0.262 0.173 #&gt; 3 2018-10-16 0.508 0.385 0.386 0.218 #&gt; 4 2018-11-01 0.714 0.532 0.410 0.142 #&gt; 5 2018-11-17 0.426 0.344 0.420 0.237 #&gt; 6 2018-12-03 0.668 0.412 0.300 0.117 #&gt; 7 2018-12-19 0.684 0.440 0.323 0.152 #&gt; 8 2019-01-01 0.719 0.462 0.325 0.0874 #&gt; 9 2019-01-17 0.610 0.430 0.374 0.146 #&gt; 10 2019-02-02 0.664 0.381 0.276 0.0936 #&gt; # … with 13 more rows Both the data cube and the time series tibble can be exported to exchange formats such as JSON. library(jsonlite) # export the data cube to JSON jsonlite::write_json( x = s2_20LKP_cube_MPC, path = &quot;./data_cube.json&quot;, pretty = TRUE ) # export the time series to JSON jsonlite::write_json( x = samples_prodes_4classes, path = &quot;./time_series.json&quot;, pretty = TRUE ) Extending the color table In examples provided in the book, the color legend is taken for the predefined color table provided by sits. The options for defining labels and colors include: Predefined color table: sits has a default color table, that can be shown using the command sits_config_show(colors = TRUE). This color definition file assigns colors to about 250 class names, including the IPCC and IGBP land use classes, the UMD GLAD classification scheme, the FAO LCC1 and LCCS2 land use layers, and the LCCS3 surface hydrology layer. User-defined defined color table: users can set the legend they prefer with a YAML user-defined configuration file. This file should defined by the environmental variable SITS_CONFIG_USER_FILE. Create an YAML file, and then set the path to it with Sys.setenv(SITS_CONFIG_USER_FILE=\"path_to_myfile\"). An example of an YAML file with user-defined legend is shown below. User-defined legend: users may define their own legends and pass them as parameters to to the plot function. colors: Cropland: &quot;khaki&quot; Deforestation: &quot;sienna&quot; Forest : &quot;darkgreen&quot; Grassland : &quot;lightgreen&quot; NonForest: &quot;lightsteelblue1&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
